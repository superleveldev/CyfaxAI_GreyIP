import { getHighestCvssItem, getTopItems } from "@/lib/utils";
import { VulnscanResult } from "@/types/api-responses/detail-report";
import { useMemo } from "react";
import { FormattedMessage } from "react-intl";

function getHighestCvssVulnerability<
  T extends VulnscanResult["org_domain"]["ports"][number]["vulnerability_list"][number],
>(vulnerabilities: T[]): T | null {
  if (vulnerabilities.length === 0) return null;

  // Separate vulnerabilities based on `is_exploit` flag
  const exploitVulnerabilities = vulnerabilities.filter(
    (vuln) => vuln.is_exploit,
  );

  // Find the highest CVSS score among exploit vulnerabilities
  const highestExploitVulnerability = exploitVulnerabilities.reduce(
    (maxVuln, currentVuln) =>
      currentVuln.cvss > maxVuln.cvss ? currentVuln : maxVuln,
    exploitVulnerabilities[0],
  );

  const nonExploitVulnerabilities = vulnerabilities.filter(
    (vuln) => !vuln.is_exploit,
  );
  // If no exploit vulnerabilities are found, fall back to non-exploit ones
  if (!highestExploitVulnerability) {
    return nonExploitVulnerabilities.reduce(
      (maxVuln, currentVuln) =>
        currentVuln.cvss > maxVuln.cvss ? currentVuln : maxVuln,
      nonExploitVulnerabilities[0],
    );
  }

  return highestExploitVulnerability;
}

const CompanyExploitableServicesTable = ({
  rows,
}: {
  rows: VulnscanResult["org_domain"]["ports"];
}) => {
  // const first3Rows = useMemo(() => {
  //   const formattedRows = rows.map((row) => {
  //     const highestCvssVulnerability = getHighestCvssVulnerability(
  //       row.vulnerability_list,
  //     );
  //     return {
  //       ...row,
  //       cvss: highestCvssVulnerability ? highestCvssVulnerability?.cvss : 0,
  //       is_exploit: highestCvssVulnerability
  //         ? highestCvssVulnerability?.is_exploit
  //         : false,
  //       vuln_id: highestCvssVulnerability
  //         ? highestCvssVulnerability?.vuln_id
  //         : "-",
  //     };
  //   });

  //   return getTopItems(formattedRows, 3);
  // }, [rows]);

  const first3Rows = useMemo(() => {
    const sub_domains = rows.map((row) => {
      const highestCvssVulnerability = getHighestCvssItem(
        row.vulnerability_list,
      );

      return {
        ...row,
        ...highestCvssVulnerability,
      };
    });

    return getTopItems(sub_domains, 3);
  }, [rows]);

  return (
    <>
      <table className="w-full max-lg:hidden">
        <thead>
          <tr className="bg-[#60605B]/[.07] [&>th]:py-3.5 [&>th]:pl-6 [&>th]:text-left [&>th]:font-mulish [&>th]:font-semibold">
            <th>
              <FormattedMessage id="port" />
            </th>
            <th>
              <FormattedMessage id="protocol" />
            </th>
            <th>
              <FormattedMessage id="serviceName" />
            </th>
            <th>
              <FormattedMessage id="product" />
            </th>
            <th>
              <FormattedMessage id="cVEExploitID" />
            </th>
            <th>
              <FormattedMessage id="cVSSScore" />
            </th>
            <th>
              <FormattedMessage id="exploitAvailable" />
            </th>
          </tr>
        </thead>
        <tbody>
          {first3Rows?.map((row, i) => {
            return (
              <tr
                key={i}
                className="[&>td]:border-b [&>td]:py-4 [&>td]:pl-6 [&>td]:font-mulish [&>td]:text-sm"
              >
                <td>{row?.port}</td>
                <td>{row?.protocol}</td>
                <td>{row?.service_name}</td>
                <td>{row?.service_product}</td>
                <td>{row?.vuln_id}</td>
                <td>{row?.cvss}</td>
                <td className="capitalize">{row?.is_exploit?.toString()}</td>
              </tr>
            );
          })}
        </tbody>
      </table>

      <div className="grid grid-cols-1 gap-3 font-mulish md:grid-cols-2 lg:hidden">
        {first3Rows.map((row, i) => (
          <div
            key={i}
            className="rounded-lg p-3 shadow-[0_0_12px_rgba(0,0,0,0.12)]"
          >
            <div className="flex justify-between">
              <div>
                <p className="text-[13px] font-semibold tracking-[-0.2px]">
                  <FormattedMessage id="port" />
                </p>
                <span className="mt-2.5 text-xs">{row?.port}</span>
              </div>
              <div>
                <p className="text-[13px] font-semibold tracking-[-0.2px]">
                  <FormattedMessage id="protocol" />
                </p>
                <span className="mt-2.5 text-xs">{row?.protocol}</span>
              </div>
              <div>
                <p className="text-[13px] font-semibold tracking-[-0.2px]">
                  <FormattedMessage id="serviceName" />
                </p>
                <span className="mt-2.5 text-xs">{row?.service_name}</span>
              </div>
              <div>
                <p className="text-[13px] font-semibold tracking-[-0.2px]">
                  <FormattedMessage id="product" />
                </p>
                <span className="mt-2.5 text-xs">{row?.service_product}</span>
              </div>
            </div>

            <hr className="my-2.5 border-t border-black/20" />

            <div className="flex items-center justify-between">
              <div className="text-center">
                <p className="text-[13px] font-semibold tracking-[-0.2px]">
                  <FormattedMessage id="cVEExploitID" />
                </p>
                <span className="mt-2.5 block max-w-[100px] truncate text-xs">
                  {row?.vuln_id}
                </span>
              </div>
              <span className="h-3.5 border-r border-black/20"></span>
              <div className="text-center">
                <p className="text-[13px] font-semibold tracking-[-0.2px]">
                  <FormattedMessage id="cVSSScore" />
                </p>
                <span className="mt-2.5 text-xs">{row?.cvss}</span>
              </div>
              <span className="h-3.5 border-r border-black/20"></span>
              <div className="text-center">
                <p className="text-[13px] font-semibold tracking-[-0.2px]">
                  <FormattedMessage id="exploitAvailable" />
                </p>
                <span className="mt-2.5 text-xs capitalize">
                  {row?.is_exploit?.toString()}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </>
  );
};

export default CompanyExploitableServicesTable;
