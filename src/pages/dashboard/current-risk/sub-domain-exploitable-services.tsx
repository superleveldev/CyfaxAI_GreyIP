import React, { useState, useEffect } from 'react';  
import SubDomainExploitableServicesAllTable from "@/components/sub-domain-exploitable-services-all-table";  
import { Tabs, TabsContent } from "@/components/ui/tabs";  
import { PaginationComponent } from '@/components/common/pagination';  
import useDetailReport from "@/views/current-risk/hooks/useDetailReport";  
import { FormattedMessage } from "react-intl";  

const AttackSurface = () => {  
  const { data } = useDetailReport();  
  const [currentPage, setCurrentPage] = useState(1);  
  const [itemsPerPage, setItemsPerPage] = useState(10);  
  const [maxPage, setMaxPage] = useState(0); // Define maxPage and its setter  
  const [sortedSubdomains, setSortedSubdomains] = useState<any[]>([]); // Adjust the initial state to match expected type   

  useEffect(() => {  
    const subdomains = data?.vulnscan_result?.sub_domain || [];  
    
    const sorted = subdomains.map(subdomain => {  
      return {  
        ...subdomain,  
        ports: subdomain.ports.map(port => {  
          // Find highest CVSS score for each port  
          const highestCvss = port.vulnerability_list.reduce((max, current) => current.cvss > max ? current.cvss : max, 0);  
          const hasExploit = port.vulnerability_list.some(vuln => vuln.is_exploit);  
          // Adding calculated fields for sorting purpose  
          return {...port, highestCvss, hasExploit};  
        })  
      };  
    }).sort((a, b) => {  
      const aMaxCvss = Math.max(...a.ports.map(port => port.highestCvss));  
      const bMaxCvss = Math.max(...b.ports.map(port => port.highestCvss));  
      const aHasExploit = a.ports.some(port => port.hasExploit);  
      const bHasExploit = b.ports.some(port => port.hasExploit);  

      if (aHasExploit === bHasExploit) {  
        return bMaxCvss - aMaxCvss;  
      }  
      return aHasExploit ? -1 : 1;  
    });  
    
    setSortedSubdomains(sorted);  
  }, [data]);  // Dependency on `data` ensures this runs when `data` changes  

  useEffect(() => {  
    const totalItems = sortedSubdomains.length;  
    setMaxPage(Math.ceil(totalItems / itemsPerPage));  
  }, [sortedSubdomains, itemsPerPage]);  // Recalculate max pages when sortedSubdomains or itemsPerPage changes  

  const paginatedSubdomains = sortedSubdomains.slice(  
    (currentPage - 1) * itemsPerPage,  
    currentPage * itemsPerPage  
  );  
  
  const gotoPage = (page: number) => {  
    setCurrentPage(page);  
  };  

  const handleItemsPerPageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {  
    setItemsPerPage(Number(event.target.value));  
    setCurrentPage(1); // Reset to first page as the items per page changes  
  };  


  return (  
    <>  
      <div className="p-4 font-mulish xl:p-5">  
        <h2 className="text-sm font-semibold sm:text-2xl/[120%]">  
          <FormattedMessage id="subDomainExploitableServicesTableTitle" />   
        </h2>  
      </div>  
      <div className="p-3 sm:rounded-xl sm:p-5">  
        <Tabs defaultValue="sub_domain_exploitable_services">  
          <TabsContent value="sub_domain_exploitable_services" key="sub_domain_exploitable_services" asChild>  
            <div className="overflow-hidden rounded shadow-[0_4px_14px_2px_rgba(0,0,0,0.06)]">  
              {paginatedSubdomains && (  
                <SubDomainExploitableServicesAllTable  
                  subdomains={paginatedSubdomains}  
                />  
              )}  
              <div className="flex w-full justify-center py-4">  
                        <div className="flex items-center justify-center space-x-8">  
                            <div className="flex w-full justify-center py-4">  
                                <div className="flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-8 w-full">  
                                    {/* Items per page selection */}  
                                    <div className="flex flex-row items-center justify-center md:justify-start">  
                                        <label htmlFor="itemsPerPage" className="mr-2">  
                                            <FormattedMessage id="pageShowCount" />  
                                        </label>  
                                        <select value={itemsPerPage} onChange={handleItemsPerPageChange} className="text-center md:text-left">  
                                            <option value="10">10</option>  
                                            <option value="20">20</option>  
                                            <option value="50">50</option>  
                                        </select>  
                                    </div>  

                                    {/* Pagination component - center on mobile */}  
                                    <div className="w-full flex justify-center md:justify-start">  
                                        <PaginationComponent  
                                            currentPage={currentPage}  
                                            maxPage={maxPage}  
                                            gotoPage={gotoPage}  
                                        />   
                                    </div>  
                                </div>  
                            </div>
                        </div>  
                    </div>
            </div>  
          </TabsContent>  
        </Tabs>  
      </div>  
    </>  
  );  
};  

export default AttackSurface;